mysql> create table Movie(mID int, title text, year int, director text);

insert into Movie values(101, 'Gone with the Wind', 1939, 'Victor Fleming');
insert into Movie values(102, 'Star Wars', 1977, 'George Lucas');
insert into Movie values(103, 'The Sound of Music', 1965, 'Robert Wise');
insert into Movie values(104, 'E.T.', 1982, 'Steven Spielberg');
insert into Movie values(105, 'Titanic', 1997, 'James Cameron');
insert into Movie values(106, 'Snow White', 1937, null);
insert into Movie values(107, 'Avatar', 2009, 'James Cameron');
insert into Movie values(108, 'Raiders of the Lost Ark', 1981, 'Steven Spielberg');


mysql> create table Reviewer(rID int, name text);

insert into Reviewer values(201, 'Sarah Martinez');
insert into Reviewer values(202, 'Daniel Lewis');
insert into Reviewer values(203, 'Brittany Harris');
insert into Reviewer values(204, 'Mike Anderson');
insert into Reviewer values(205, 'Chris Jackson');
insert into Reviewer values(206, 'Elizabeth Thomas');
insert into Reviewer values(207, 'James Cameron');
insert into Reviewer values(208, 'Ashley White');


mysql> create table Rating(rID int, mID int, stars int, ratingDate date);

insert into Rating values(201, 101, 2, '2011-01-22');
insert into Rating values(201, 101, 4, '2011-01-27');
insert into Rating values(202, 106, 4, null);
insert into Rating values(203, 103, 2, '2011-01-20');
insert into Rating values(203, 108, 4, '2011-01-12');
insert into Rating values(203, 108, 2, '2011-01-30');
insert into Rating values(204, 101, 3, '2011-01-09');
insert into Rating values(205, 103, 3, '2011-01-27');
insert into Rating values(205, 104, 2, '2011-01-22');
insert into Rating values(205, 108, 4, null);
insert into Rating values(206, 107, 3, '2011-01-15');
insert into Rating values(206, 106, 5, '2011-01-19');
insert into Rating values(207, 107, 5, '2011-01-20');
insert into Rating values(208, 104, 3, '2011-01-02');

mysql> select * from movie;

+------+-------------------------+------+------------------+
| mID  | title                   | year | director         |
+------+-------------------------+------+------------------+
|  101 | Gone with the Wind      | 1939 | Victor Fleming   |
|  102 | Star Wars               | 1977 | George Lucas     |
|  103 | The Sound of Music      | 1965 | Robert Wise      |
|  104 | E.T.                    | 1982 | Steven Spielberg |
|  105 | Titanic                 | 1997 | James Cameron    |
|  106 | Snow White              | 1937 | NULL             |
|  107 | Avatar                  | 2009 | James Cameron    |
|  108 | Raiders of the Lost Ark | 1981 | Steven Spielberg |
+------+-------------------------+------+------------------+
8 rows in set (0.00 sec)

mysql> select * from reviewer;

+------+------------------+
| rID  | name             |
+------+------------------+
|  201 | Sarah Martinez   |
|  202 | Daniel Lewis     |
|  203 | Brittany Harris  |
|  204 | Mike Anderson    |
|  205 | Chris Jackson    |
|  206 | Elizabeth Thomas |
|  207 | James Cameron    |
|  208 | Ashley White     |
+------+------------------+
8 rows in set (0.00 sec)

mysql> select * from rating;

+------+------+-------+------------+
| rID  | mID  | stars | ratingDate |
+------+------+-------+------------+
|  201 |  101 |     2 | 2011-01-22 |
|  201 |  101 |     4 | 2011-01-27 |
|  202 |  106 |     4 | NULL       |
|  203 |  103 |     2 | 2011-01-20 |
|  203 |  108 |     4 | 2011-01-12 |
|  203 |  108 |     2 | 2011-01-30 |
|  204 |  101 |     3 | 2011-01-09 |
|  205 |  103 |     3 | 2011-01-27 |
|  205 |  104 |     2 | 2011-01-22 |
|  205 |  108 |     4 | NULL       |
|  206 |  107 |     3 | 2011-01-15 |
|  206 |  106 |     5 | 2011-01-19 |
|  207 |  107 |     5 | 2011-01-20 |
|  208 |  104 |     3 | 2011-01-02 |
+------+------+-------+------------+
14 rows in set (0.00 sec)




1. Find the titles of all movies directed by Steven Spielberg. (1 point possible)

mysql> select title from movie where director='Steven Spielberg';

+-------------------------+
| title                   |
+-------------------------+
| E.T.                    |
| Raiders of the Lost Ark |
+-------------------------+
2 rows in set (0.00 sec)


2. Find all years that have a movie that received a rating of 4 or 5, and sort them in increasing order. (1 point possible)
 
 mysql> select distinct(year) from movie m join rating r
		on m.mid=r.mid
		where stars in (4,5)
		order by year;
		
+------+
| year |
+------+
| 1937 |
| 1939 |
| 1981 |
| 2009 |
+------+
4 rows in set (0.00 sec)


3. Find the titles of all movies that have no ratings.(1 point possible)

mysql> select title from movie where mid not in(select distinct(mid) from rating);

+-----------+
| title     |
+-----------+
| Star Wars |
| Titanic   |
+-----------+
2 rows in set (0.03 sec)

4. Some reviewers didn't provide a date with their rating.Find the names of all reviewers who have ratings with a NULL value for the date. (1 point possible)
 
mysql> select name from reviewer r join rating rr on r.rid=rr.rid
		where ratingdate is null;
		
+---------------+
| name          |
+---------------+
| Daniel Lewis  |
| Chris Jackson |
+---------------+
2 rows in set (0.00 sec)

5. Write a query to return the ratings data in a more readable format:reviewer name, movie title, stars, and ratingDate. Also, sort the data, first by reviewer 
name, then by movie title, and lastly by number of stars. (1 point possible)

mysql> select name,title,stars,ratingdate from rating r join reviewer rr on r.rid=rr.rid
		join movie m on r.mid=m.mid
		order by name,title,stars;
		
+------------------+-------------------------+-------+------------+
| name             | title                   | stars | ratingdate |
+------------------+-------------------------+-------+------------+
| Ashley White     | E.T.                    |     3 | 2011-01-02 |
| Brittany Harris  | Raiders of the Lost Ark |     2 | 2011-01-30 |
| Brittany Harris  | Raiders of the Lost Ark |     4 | 2011-01-12 |
| Brittany Harris  | The Sound of Music      |     2 | 2011-01-20 |
| Chris Jackson    | E.T.                    |     2 | 2011-01-22 |
| Chris Jackson    | Raiders of the Lost Ark |     4 | NULL       |
| Chris Jackson    | The Sound of Music      |     3 | 2011-01-27 |
| Daniel Lewis     | Snow White              |     4 | NULL       |
| Elizabeth Thomas | Avatar                  |     3 | 2011-01-15 |
| Elizabeth Thomas | Snow White              |     5 | 2011-01-19 |
| James Cameron    | Avatar                  |     5 | 2011-01-20 |
| Mike Anderson    | Gone with the Wind      |     3 | 2011-01-09 |
| Sarah Martinez   | Gone with the Wind      |     2 | 2011-01-22 |
| Sarah Martinez   | Gone with the Wind      |     4 | 2011-01-27 |
+------------------+-------------------------+-------+------------+
14 rows in set (0.09 sec)


6. For all cases where the same reviewer rated the same movie twice and gave it a higher rating the second time, return the reviewer's  name and the title of 
the movie. (1 point possible)

mysql> select name,title from rating r1 join rating r2
		on r1.rid=r2.rid and r1.mid=r2.mid
		join movie m on r1.mid=m.mid
		join reviewer r on r1.rid=r.rid
		where r1.stars < r2.stars
		and r1.ratingdate<r2.ratingdate;
		
+----------------+--------------------+
| name           | title              |
+----------------+--------------------+
| Sarah Martinez | Gone with the Wind |
+----------------+--------------------+
1 row in set (0.00 sec)

7. For each movie that has at least one rating, find the highest number of stars that movie received. Return the movie title and number of stars. 
Sort by movie title. (1 point possible)
 
 mysql> select title,max(stars) as stars from rating r
		join movie m on r.mid=m.mid
		group by r.mid
		order by title;
		
+-------------------------+-------+
| title                   | stars |
+-------------------------+-------+
| Avatar                  |     5 |
| E.T.                    |     3 |
| Gone with the Wind      |     4 |
| Raiders of the Lost Ark |     4 |
| Snow White              |     5 |
| The Sound of Music      |     3 |
+-------------------------+-------+
6 rows in set (0.14 sec)

8. For each movie, return the title and the 'rating spread',that is, the difference between highest and lowest ratings given to that movie. 
Sort by rating spread from highest to lowest, then by movie title. (1 point possible)

mysql> select title,(max(stars)-min(stars)) as ratingspread from rating r
		join movie m on r.mid=m.mid
		group by r.mid
		order by ratingspread desc,title;
		
+-------------------------+--------------+
| title                   | ratingspread |
+-------------------------+--------------+
| Avatar                  |            2 |
| Gone with the Wind      |            2 |
| Raiders of the Lost Ark |            2 |
| E.T.                    |            1 |
| Snow White              |            1 |
| The Sound of Music      |            1 |
+-------------------------+--------------+
6 rows in set (0.06 sec)

9. Find the difference between the average rating of movies released  before 1980 and the average rating of movies released after 1980.
 (Make sure to calculate the average rating for each movie, then the average of those averages for movies before 1980 and movies after.
 Don't just calculate the overall average rating before and after 1980.) (1 point possible)
 

 mysql>  select (avg(pre)-avg(cur)) as avgdiff from (
		select r.mid,avg(stars) as pre from rating r join movie m
		on r.mid=m.mid
		where year<1980
		group by r.mid) prev join (
		select r.mid,avg(stars) as cur from rating r join movie m
		on r.mid=m.mid
		where year>1980
		group by r.mid) curr;
		
+------------+
| avgdiff    |
+------------+
| 0.05556667 |
+------------+
1 row in set (0.00 sec)

 
10. Find the names of all reviewers who rated Gone with the Wind.(1 point possible)

 mysql> select distinct(name) from rating r join reviewer rr
		on r.rid=rr.rid
		join movie m
		on r.mid=m.mid
		where title='Gone with the Wind';
		
+----------------+
| name           |
+----------------+
| Sarah Martinez |
| Mike Anderson  |
+----------------+
2 rows in set (0.08 sec)

11. For any rating where the reviewer is the same as the director of the movie, return the reviewer name, movie title, and number of stars. (1 point possible)

mysql> select name,title,stars from rating r join reviewer rr
		on r.rid=rr.rid
		join movie m
		on r.mid=m.mid
		where director=name;
		
+---------------+--------+-------+
| name          | title  | stars |
+---------------+--------+-------+
| James Cameron | Avatar |     5 |
+---------------+--------+-------+
1 row in set (0.00 sec)

12. Return all reviewer names and movie names together in a single list, alphabetized. (Sorting by the first name of the reviewer and first word in the title
 is fine; no need for special processing on last names or removing "The".) (1 point possible)
 
 mysql> select  title from movie
		union
		select name from reviewer
		order by title;
		
+-------------------------+
| title                   |
+-------------------------+
| Ashley White            |
| Avatar                  |
| Brittany Harris         |
| Chris Jackson           |
| Daniel Lewis            |
| E.T.                    |
| Elizabeth Thomas        |
| Gone with the Wind      |
| James Cameron           |
| Mike Anderson           |
| Raiders of the Lost Ark |
| Sarah Martinez          |
| Snow White              |
| Star Wars               |
| The Sound of Music      |
| Titanic                 |
+-------------------------+
16 rows in set (0.04 sec)

13. Find the titles of all movies not reviewed by Chris Jackson. 
(1 point possible)
 select distinct(title) from rating r right join reviewer rr
on r.rid=rr.rid
right join movie m on r.mid=m.mid
where name ="Chris Jackson";

 mysql> select distinct(title) from movie
		where mid not in( select mid from rating r join reviewer rr
		on r.rid=rr.rid where name="Chris Jackson");
		
+--------------------+
| title              |
+--------------------+
| Gone with the Wind |
| Star Wars          |
| Titanic            |
| Snow White         |
| Avatar             |
+--------------------+
5 rows in set (0.03 sec)

14. For all pairs of reviewers such that both reviewers gave a rating to the same movie, return the names of both reviewers. Eliminate duplicates,
 don't pair reviewers with themselves, and include each pair only once. For each pair, return the names in the pair in alphabetical order. (1 point possible)
 
   mysql> select distinct rr1.name,rr2.name
		from rating r1 join rating r2 on r1.mid=r2.mid
		join reviewer rr1 on r1.rid=rr1.rid
		join reviewer rr2 on r2.rid=rr2.rid
		where r1.rid < r2.rid
		order by rr1.name,rr2.name;
		
+------------------+------------------+
| name             | name             |
+------------------+------------------+
| Brittany Harris  | Chris Jackson    |
| Chris Jackson    | Ashley White     |
| Daniel Lewis     | Elizabeth Thomas |
| Elizabeth Thomas | James Cameron    |
| Sarah Martinez   | Mike Anderson    |
+------------------+------------------+
5 rows in set (0.05 sec)

15. For each rating that is the lowest (fewest stars) currently in the database, return the reviewer name, movie title, and number of stars.(1 point possible)

mysql> select name,title,stars from rating rr join reviewer r
		on rr.rid=r.rid
		join movie m on rr.mid=m.mid
		where stars=(select min(stars) from rating);
		
+-----------------+-------------------------+-------+
| name            | title                   | stars |
+-----------------+-------------------------+-------+
| Sarah Martinez  | Gone with the Wind      |     2 |
| Brittany Harris | The Sound of Music      |     2 |
| Brittany Harris | Raiders of the Lost Ark |     2 |
| Chris Jackson   | E.T.                    |     2 |
+-----------------+-------------------------+-------+
4 rows in set (0.00 sec)

16. List movie titles and average ratings, from highest-rated to lowest-rated. If two or more movies have the same average rating, list them in alphabetical
 order. (1 point possible)
 
mysql> select title,avg(stars) as average from rating r join movie m
		on r.mid=m.mid
		group by title
		order by average desc,title;
		
+-------------------------+---------+
| title                   | average |
+-------------------------+---------+
| Snow White              |  4.5000 |
| Avatar                  |  4.0000 |
| Raiders of the Lost Ark |  3.3333 |
| Gone with the Wind      |  3.0000 |
| E.T.                    |  2.5000 |
| The Sound of Music      |  2.5000 |
+-------------------------+---------+
6 rows in set (0.09 sec)

17. Find the names of all reviewers who have contributed three or more ratings. (As an extra challenge, try writing the query without HAVING or without COUNT.)
 (1 point possible)
 
mysql>select name FROM reviewer
	where (select count(*) from rating where rating.rid = reviewer.rid) >= 3;
	
+------------------+
| name             |
+------------------+
| Brittany Harris  | 
| Chris Jackson    | 
+------------------+

18. Some directors directed more than one movie.For all such directors, return the titles of all movies directed by them, along with the director name.
 Sort by director name, then movie title. (As an extra challenge, try writing the query both with and without COUNT.) (1 point possible)
 
mysql>select m1.title, m1.director
		from movie m1 join movie m2 
		on m1.director=m2.director
		group by m1.mid
		having count(*) > 1
		order by m1.director, m1.title;
+-------------------------+------------------+
| title          	      | director         |
+-------------------------+------------------+
| Avatar  				  | James Cameron    |
| Titanic    			  | James Cameron    |
| E.T.     				  | Steven Spielberg |
| Raiders of the Lost Ark | Steven Spielberg |
+-------------------------+------------------+


19. Find the movie(s) with the highest average rating. Return the movie title(s) and average rating. (Hint: This query is more difficult to write in 
SQLite than other systems; you might think of it as finding the highest average rating and then choosing the movie(s) with that average rating.) 
(1 point possible)

mysql> select title,avg(stars) as average from rating r join movie m
		on r.mid=m.mid
		group by r.mid
		having avg(stars) = (
		select max(average) from (
		select avg(stars) as average from rating
		group by mid) T);
		
+------------+---------+
| title      | average |
+------------+---------+
| Snow White |  4.5000 |
+------------+---------+
1 row in set (0.11 sec)

20. Find the movie(s) with the lowest average rating. Return the movie title(s) and average rating. (Hint: This query may be more difficult to write in 
SQLite than other systems; you might think of it as finding the lowest average rating and then choosing the movie(s) with that average rating.) 
 (1 point possible)
 
mysql> select title,avg(stars) as average from rating r join movie m
		on r.mid=m.mid
		group by r.mid
		having avg(stars) = (
		select min(average) from (
		select avg(stars) as average from rating
		group by mid) T);
		
+--------------------+---------+
| title              | average |
+--------------------+---------+
| The Sound of Music |  2.5000 |
| E.T.               |  2.5000 |
+--------------------+---------+
2 rows in set (0.03 sec)

21. For each director, return the director's name together with the title(s) of the movie(s) they directed that received the highest rating among all of 
their movies, and the value of that rating. Ignore movies whose director is NULL. (1 point possible)

mysql> SELECT director, title, MAX(stars) as maxstars
		from rating r join movie m on r.mid=m.mid
		where director is not null
		group by director;
		
+------------------+-------------------------+----------+
| director         | title                   | maxstars |
+------------------+-------------------------+----------+
| James Cameron    | Avatar                  |        5 |
| Robert Wise      | The Sound of Music      |        3 |
| Steven Spielberg | Raiders of the Lost Ark |        4 |
| Victor Fleming   | Gone with the Wind      |        4 |
+------------------+-------------------------+----------+
4 rows in set (0.06 sec)
